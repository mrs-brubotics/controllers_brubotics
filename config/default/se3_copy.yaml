version: "1.0.0.1"

default_gains:

  # Gains in this file SHOULD NOT BE CHANGED, since they are not used most of the times.
  # Gains which are actually used are in the mrs_uav_manager package under the gain_manager configs

  # influences pitching and rolling
  horizontal:
    kp: 3.0
    kv: 2.0
    ka: 1.0

    attitude:
      kq: 5.0

    kib: 0.1
    kib_lim: 10.0

    kiw: 0.1
    kiw_lim: 10.0

    kpl: 0.0
    kvl: 0.0

  # influences yawing
  vertical:
    kp: 15.0
    kv: 8.0
    ka: 1.0

    attitude:
      kq: 5.0

    kpl: 0.0
    kvl: 0.0

  mass_estimator:
    km: 1.0
    km_lim: 0.15 #0.3 #1.0 #3.0 # [kg, at least 1/2 of the UAVs mass to allow landing detection]

# gains can be muted by the tracker by this factor
# gains are also muting just after activation
gain_mute_coefficient: 0.5

constraints:

  thrust_saturation: 0.9 # [-], range from 0 to 1

  # When the controller wants to output tilt larger than this,
  # it will return an empty command instead, which should trigger
  # a failsafe in the control manager.
  tilt_angle_failsafe:
    enabled: true
    limit: deg(90.0) # [rad]

rampup:
  enabled: true
  speed: 0.75 # [1/s]

gains_filter:
  perc_change_rate: 1.0
  min_change_rate: 0.1 # perc of the difference

angular_rate_feedforward:

  # compensation of a parasitic heading rate due to pitch and roll rate
  parasitic_pitch_roll: true

  # jerk feed forward
  jerk: true

rotation_matrix: 1 # {0 = lee, 1 = baca (oblique projection}

# output mode to PixHawk
output_mode: 0 # {0 = attitude_rate, 1 = orientation}

payload:
  Epl_min: 0.05 # [m], below this payload error norm, the payload error is disabled
  Epl_max:
    failsafe_enabled: true
    scaling: 1.0 # keep scaling on 1.0. It triggers Eland if payload angles in world frame reach 90Â° (avoids singularity)
  swing_angle:
    failsafe_enabled: true
    max: deg(60)  # Eland if max swing angle is reached to avoid hitting the legs of the UAV

two_uavs_payload:
  # callback_data_max_time_delay:
  #   follower: 0.50 # = 10*_dt_0_
  #   leader: 0.100 # = 20*_dt_0_
  max_time_delay_safety_communication: 0.4 # [s] max time delay between UAVs before Eland
  n_ros_time_triggers: 4 # Number of times the trigger to determine time delay between both UAVs is sent (> 1 to be sure follower receives at least one trigger)
  # ros_time_delay:
  #   determine_ros_time_delay: true
  #   n_ros_time_l_to_f: 5 # Number of times the leader sends its time to the leader (>> 1 so that a more precise ros time delay can be determined)
  #   ros_time_l_to_f_period: 1 # leader sends ros_time to follower only every "ros_time_l_to_f_period" iterations
  nimbro:
    emulate_nimbro: false
    emulate_nimbro_delay: 0
  # connection_delay: 2 # [s] Delay between first connection and sending of ros time to determine ros time difference between the UAVs
  ready_delay: 2 # [s] Delay between when UAVs first receive messages and when they Eland if the message delay is too high 

ros_info_throttle_period: 0.1 # period of prints in the controller and tracker
